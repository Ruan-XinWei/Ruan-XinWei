{"pages":[],"posts":[{"title":"初入MVC--从前端到后台","text":"愿你熬得过万丈孤独，藏得下星辰大海 客户端技术编程一、主要完成内容 使用网页模板进行自定义设计和填充对应内容 添加日间模式和夜间模式切换功能 添加网站部分小功能，例如返回顶部和小部件缓慢切出等功能 二、主要功能实现网站整体布局 整体采用垂直布局的方式，从上至下依次是顶部导航栏、主要图片和内容的轮播图、主要信息部分、主要内容部分、特征部分、图片轮播图部分、视频展示部分、底部信息部分 在整体下面，每个子部分使用宽度撑满的策略，使其能够依次排列 顶部菜单模块 菜单使用弹性盒模型display: flex，使得菜单排列在一行，并且控制每个的标签的padding属性，使其整齐排列 网站名称使用行内盒模型display: inline-block;，并设置white-space: nowrap;，使其不换行，配合padding完成位置布局 展示图片的gallery模块 通过JavaScript调整其图片的class为owl-item cloned active或owl-item cloned，配合类选择器选择active来设置样式 动画效果通过设置transform和transition来实现动画效果 三、额外功能实现日间模式和夜间模式切换 简要描述实现过程 在右下角设置一个切换按钮，样式设置成太阳和月亮的切换，太阳代表切换成日间模式，月亮代表切换成夜间模式 使用JavaScript获取到此时的模式，并设置在点击的时候实现切换功能 如果切换成夜间模式，主要将背景切换成黑色，并且设置一定的不透明度，再将字体设置为白色，形成一个高对比，然后将切换按钮的图片修改为太阳图标 如果切换成日间模式，主要将样式修改成默认样式，再将切换按钮的图片修改为月亮图标 HTML部分 12345&lt;section class=\"right-nav\" id=\"right-nav\"&gt; &lt;div class=\"black\" id=\"black\"&gt; &lt;img src=\"img/night.png\" alt=\"夜间模式\"&gt; &lt;/div&gt;&lt;/section&gt; CSS部分 12345.right-nav .black img{ border-radius: 50%; width: 30px; height: 30px;} JavaScript部分 点击事件 123$(\"#black\").click(function () { //功能实现...} 获取模式信息 12//获取对应模式信息，夜间模式或日间模式var s = $(\"[alt$='间模式']\").attr(\"alt\"); 设置对应模式样式 夜间模式 1234567891011$('body').css(\"background-color\", \"black\") //设置背景颜色为黑色$('body').css(\"opacity\", \"0.7\") //设置不透明度$('body').css(\"-moz-opacity\", \"0.7\")$('body').css(\"filter\", \"alpha(opacity=50)\") //设置滤镜$('body').append(\"&lt;style&gt;::selection {background-color: #d8d5da;color: #fff;}&lt;/style&gt;\") //设置选中的背景样式$('.mb-10,.pb-30,p,li,a,span.lnr').css(\"color\", \"white\") //给对应字体设置颜色$('span.lnr-arrow-up,span.lnr-arrow-down').css(\"color\", \"#222\") //给箭头设置颜色$('.project-area,.info-content,.single-feature,.gallery-area').css(\"background-color\", \"black\") //给对应模块设置背景样式$('.header-btn').css(\"background-color\", \"transparent\") //设置对应按钮背景颜色透明$('.info-content').append(\"&lt;style&gt;.info-area .info-content::after{background-color: black}&lt;/style&gt;\") //给对应元素添加样式$('.active-works-carousel .owl-dots .owl-dot.active').css(\"background\", \"#777777;\") //设置背景颜色 日间模式 12345678910$('body').css(\"background-color\", \"\"); //设置为默认背景颜色$('body').css(\"opacity\", \"\") //取消不透明$('body').css(\"-moz-opacity\", \"\")$('body').css(\"filter\", \"\") //取消滤镜//给对应部件设置样式$('body').append(\"&lt;style&gt;::selection {background-color: #b01afe;color: #fff;}&lt;/style&gt;\")$('.mb-10,.pb-30,p,li,a,span.lnr').css(\"color\", \"\")$('.project-area,.info-content,.single-feature,.gallery-area').css(\"background-color\", \"\")$('.header-btn').css(\"background-color\", \"white\")$('.info-content').append(\"&lt;style&gt;.info-area .info-content::after{background-color: white}&lt;/style&gt;\") 切换功能 夜间模式 1234$(\"[alt='夜间模式']\").attr({ \"src\": \"img/sum.png\", \"alt\": \"日间模式\"}); 日间模式 1234$(\"[alt='日间模式']\").attr({ \"src\": \"img/night.png\", \"alt\": \"夜间模式\"}); 缓慢切入 简要描述实现过程 使用选择器，选择到对应的元素后，设置transition: 5s，将如果某个属性发生改变，则在5s内缓慢改变 通过JavaScript实现在加载的时候，修改这个元素的位置，配合css的设置，则实现了缓慢切入的动画 css部分 12345678.right-nav { position: fixed; bottom: 20px; right: -30px; z-index: 999; transition: 5s; //设置transition后，right从—30px变化到20px的过程总共花费5s cursor: pointer;} Javascript部分 123window.onload = function () { document.getElementById(\"right-nav\").style.right = \"20px\";} 四、主要结果截图 日间模式和夜间模式的切换 夜间模式 日间模式 右下角的功能按钮 整体实现效果 JavaScript编程一、主要完成内容 随机生成4位的字母和数字组合的验证码 实现通过滑块进行图片验证 二、主要功能实现随机产生一个四位验证码 makeCode()：随机产生一个四位验证码的主要函数 1234567891011//产生一个四位验证码function makeCode() { string = \"\" //初始验证码为空 var code = document.getElementById(\"code-main\") //DOM获取元素 code.onclick = makeCode //设置code点击事件 refresh.onclick = makeCode //设置refresh点击事件 for(let i = 0; i &lt; 4; ++i) { //总共产生4位 string += createChar() //每次添加一个随机位 } code.innerHTML = string //修改HTML数据} createChar()：随机产生一个字符a-z,A-Z,0-9 12345678910111213function createChar() { var num = Math.round(Math.random()) == 0 //随机确定是字母还是数字 if(num == true) { //如果是数字，则返回0-9 return Math.round(Math.random()*9) } else { //如果是字母 var char = String.fromCharCode(65 + Math.round(Math.random() * 25)) //随机产生一个字母 if(Math.round(Math.random()) == 0) { //确定大小写 return char.toLowerCase() //返回小写 } return char //返回大写 }} 验证四位验证码是否正确 testCode()：进行验证码验证 12345678910function testCode() { // console.log(\"success\") console.log(char_code.value) if (char_code.value == string) { //如果输入与随机产生相同 alert(\"字符验证码验证成功！\") } else { //如果不同 alert(\"字符验证码验证失败！\") } location.reload()} 随机产生一个图片缺口 selectSection()：随机挑选图片中的一部分 1234567891011121314function selectSection() { var img = document.getElementById(\"img\") //DOM获取id为img的元素 var height_string = img.getAttribute(\"height\") //获取元素的高度 var img_height = height_string.substring(0, height_string.indexOf(\"px\")) //获取实际像素值 var img_url = img.getAttribute(\"src\") //获取图片地址 //设置成功位置的位置 success_section.style.top = success_position_y + \"px\" success_section.style.left = success_position_x + \"px\" //进行按钮位置微调 section.style.top = success_position_y - img_height - 6 + \"px\" //获取图片缺省部分 section.style.background = \"url(\" + img_url + \") -\" + success_position_x + \"px -\" + success_position_y + \"px/auto \" + img_height + \"px\"} 随机产生图片 randomImage()：随机产生图片 1234567function randomImage() { var img = document.getElementById(\"img\") //获取图片元素 var num = Math.ceil(Math.random()*5) + 1; //随机产生图片序号 img_num = (img_num + num)%5 + 2 //适配本地图片序号 var img_src = \"./img/img\"+ img_num +\".png\" //生成对应地址 img.setAttribute(\"src\",img_src) //修改图片} 通过滑块进行图片验证 buttonDown(e)：图片button点击事件 123456789101112function buttonDown(e) { //清除样式 button.style.transition = \"\" background.style.transition = \"\" //获取button开始位置 var e = e || window.event || e.which; start_button_position = e.clientX document.onmousemove = buttonMove //设置鼠标移动事件 document.onmouseup = buttonUp //设置鼠标松开事件} buttonMove(e)：图片button移动事件 123456789function buttonMove(e) { var button_move = e.clientX //获取移动的位置 //获取移动的长度 move_length = moveLength(button_move - start_button_position, 0, max_length) //修改移动过程中的样式 button.style.left = move_length + \"px\" background.style.width = move_length + 20 + \"px\"} buttonUp()：图片button鼠标松开 123456789101112131415function buttonUp() { var abs = Math.abs(move_length - success_length) //获取移动的距离和需要移动的距离的差值 if (abs &gt;= 5) { //如果超过5px的偏差，则失败，重新调整按钮位置 button.style.left = \"\" background.style.width = \"\" //控制其缓慢移动 button.style.transition = \"left 0.8s linear\" background.style.transition = \"width 0.8s linear\" } else { //否则就验证成功 successMove() } //取消事件，重新开始 document.onmousemove = null document.onmouseup = null} moveLength(length, min, max)：返回一个符合规范的移动长度 12345678function moveLength(length, min, max) { if (length &lt; min) { //如果小于最低要求，则返回最低要求 return min } else if (length &gt; max) { //如果超过最高要求，则返回最高要求 return max } return length //正常返回} successMove()：成功对齐执行函数 1234567891011121314151617function successMove() { success = true //设置状态为true text.innerHTML = \"解锁成功\" //修改HTML内容 background.style.backgroundColor = \"lightgreen\" //修改背景颜色 // icon.className = \"fas fa-thumbs-up\" icon.className = \"icon iconfont iconicon_xuanzhong\" //更换图标 icon.style.color = \"green\" //设置颜色 //取消对应事件 button.onmousedown = null document.onmousemove = null //延时100ms后弹出结果，并在确认后刷新 setTimeout(function() { alert(\"图片解锁成功！\") location.reload() }, 100)} 三、额外功能实现自动获取焦点 简要描述：设置输入框的autofocus属性为autofocus 代码实现 1&lt;input type=\"text\" id=\"char-input\" autofocus=\"autofocus\"&gt; 监听回车 简要描述：在输入完毕后可以直接在输入框中输入回车，则进行验证字符验证码 代码实现 1234567char_code.onkeypress = listenDownfunction listenDown(e) { var e = e || window.event || e.which; if(e.keyCode == 13) { //如果是回车，进行验证码验证 testCode() }} 四、主要样式实现 简要描述 布局问题：整体大概划分了两个部分，左边字符验证部分和右边的图片验证部分，主要使用的是设置一个主div，和两个子div，然后两个子div进行float: left浮动起来，形成两个同时水平排列 矢量图标问题：这次实现过程中，不仅使用了阿里的矢量图标库，也使用了iconfont的矢量图标库，两者既有差别又有很多相似之处 主要实现部分 布局问题 123456789101112.char-code { //字符验证部分 float: left; margin: 100px; width: 270px;}.captcha { //图片验证部分 float: left; width: 400px; margin: 0px auto; margin-top: 50px;} 矢量图标问题 阿里矢量图标 1234&lt;link rel=\"stylesheet\" href=\"ali-font/iconfont.css\"&gt; &lt;!-- 引入阿里库 --&gt;&lt;div class=\"icon iconfont iconicon-doubleright-line\" id=\"icon\"&gt;&lt;/div&gt; &lt;!-- 右移动图标 --&gt;&lt;div class=\"icon iconfont iconicon_xuanzhong\" id=\"icon\"&gt;&lt;/div&gt; &lt;!-- 成功图标 --&gt; iconfont矢量图标 12345&lt;!-- 引入iconfont库 --&gt;&lt;link rel=\"stylesheet\" href=\"./fa/css/all.min.css\"&gt;&lt;link rel=\"stylesheet\" href=\"./iconfont/iconfont.css\"&gt;&lt;i class=\"fas fa-sync fa-spin\" id=\"refresh\"&gt;&lt;/i&gt; &lt;!-- 刷新图标 --&gt; 五、主要结果截图 主界面 字符验证成功界面 图片验证成功界面 GuestBookSystem一、主要完成内容 使用ASP.NET MVC + Code First技术完成留言本系统 具有普通用户和管理员用户两个角色 普通用户具有登录，注册，发布个人留言，阅读全部留言，显示个人留言等功能 管理员用户具有登录，注册，审核留言，删除留言，阅读留言等功能 并且该留言本系统具有用户审核等功能 二、主要功能实现非特定角色功能 登录功能 登录验证简要逻辑 首先在视图中进行输入账号密码，在前端首先进行验证 如果前端输入出现异常，则前端进行简要格式验证，并将错误信息返还给用户，进行提示 对应的输入使用Razor，以便能够简单验证输入的数据 保存错误信息使用@Html.ValidationSummary()，添加在页面中，但是进行隐藏，前端不直接显示，而通过JavaScript的alert进行简易的弹窗 如果通过前端简要验证，则通过POST传输到后台Account/Login，后台进行数据库查询 如果没有这条记录，则提示登录失败的信息，并返回登录视图，给用户重新登录 如果查询到对应记录，则辨别是管理员还是普通用户，如果是管理员则跳转到Admin/Index，如果是普通用户则跳转到User/AllWords，再进行后续操作 登录功能前端代码 12345678910111213141516171819@model GuestBookSystem.Models.User@{ ViewBag.Title = \"Login\"; Layout = \"~/Views/Shared/_LayoutAccount.cshtml\";}@using (Html.BeginForm(\"Login\", \"Account\", new { ReturnUrl = \"\" }, FormMethod.Post)){ &lt;div class=\"user\"&gt; @Html.TextBoxFor(a =&gt; a.Name, new { @placeholder = \"用户名\" }) &lt;/div&gt; &lt;div class=\"password\"&gt; @Html.TextBoxFor(a =&gt; a.Password, new { @placeholder = \"密码\", @type = \"password\" }) &lt;/div&gt; &lt;div class=\"submit\"&gt; &lt;input type=\"submit\" value=\"登录\" id=\"submit\"&gt; &lt;/div&gt; &lt;span hidden id=\"hidden\"&gt;@Html.ValidationSummary()&lt;/span&gt;} 登录验证后台代码 123456789101112131415161718//在数据库中查找对应账号密码var dbUser = db.Users.Where( a =&gt; a.Name == user.Name &amp;&amp; a.Password == user.Password).FirstOrDefault();if (dbUser != null) //如果能找到对应账号密码{ ViewBag.STATE = true; //记录登录状态 if (dbUser.SRole.ToString() == &quot;管理员&quot;) //如果是管理员 { Session[&quot;UserId&quot;] = dbUser.UserId; //记录UserId return RedirectToAction(&quot;Index&quot;, &quot;Admin&quot;); //跳转Admin/Index } else if (dbUser.SRole.ToString() == &quot;普通用户&quot;) //如果是普通用户 { Session[&quot;UserId&quot;] = dbUser.UserId; return RedirectToAction(&quot;AllWords&quot;, &quot;User&quot;); //跳转User/AllWords }} 注册功能 注册功能简要逻辑 首先在视图中进行输入账号密码，在前端首先进行验证 如果前端输入出现异常，则前端进行简要格式验证，并将错误信息返还给用户，进行提示 实现提示逻辑和登录功能相似，都是使用@Html.ValidationSummary() 如果通过前端简要验证，则通过POST传输到后台Account/Register，后台进行注册验证 如果注册失败，则提示注册失败的信息，并返回注册视图，给用户重新注册 如果注册成功，则跳转到登录界面，便于用户的登录 注册功能前端代码 12345678910111213141516171819202122232425@using (Html.BeginForm(\"Register\", \"Account\", FormMethod.Post)){ &lt;div class=\"email\"&gt; @Html.TextBoxFor(a =&gt; a.Email, new { @placeholder = \"注册邮箱\" }) &lt;/div&gt; &lt;div class=\"name\"&gt; @Html.TextBoxFor(a =&gt; a.Name, new { @placeholder = \"注册用户名\" }) &lt;/div&gt; &lt;div class=\"password\"&gt; @Html.TextBoxFor(a =&gt; a.Password, new { @placeholder = \"注册密码\" }) &lt;/div&gt; &lt;div class=\"srole\"&gt; &lt;span class=\"text\"&gt; 注册角色: &lt;/span&gt; &lt;select id=\"SRole\" name=\"SRole\"&gt; &lt;option value=\"0\"&gt;管理员&lt;/option&gt; &lt;option value=\"1\" selected&gt;普通用户&lt;/option&gt; &lt;/select&gt; &lt;/div&gt; &lt;div class=\"submit\"&gt; &lt;input type=\"submit\" value=\"注册\" id=\"submit\"&gt; &lt;/div&gt; &lt;span hidden id=\"hidden\"&gt;@Html.ValidationSummary()&lt;/span&gt;} 注册功能后台代码 1234567891011[HttpPost]public ActionResult Register(User user){ if (ModelState.IsValid) //如果状态通过 { db.Users.Add(user); //在数据库中添加这个记录 db.SaveChanges(); //保存数据库 return RedirectToAction(&quot;Login&quot;); //跳转到/Login } return View(); //如果不通过，则返回注册视图} 主页阅读留言功能 留言功能实现逻辑 通过数据库进行查询状态为通过的留言，并更加创建时间进行倒序，并将数据传送给前端 前端通过@foreach，进行遍历输出对应字段 留言功能前端代码 12345678910@foreach (var gb in Model){ &lt;tr&gt; &lt;td&gt; &lt;span class=\"username\"&gt;@gb.User.Name :&lt;/span&gt; &lt;span class=\"context\"&gt;@gb.Content&lt;/span&gt; &lt;span class=\"date\"&gt;@gb.CreatedOn&lt;/span&gt; &lt;/td&gt; &lt;/tr&gt;} 留言功能后台代码 1234567GBSDBContext db = new GBSDBContext(); //数据库// GET: GuestBookpublic ActionResult Index(){ var gb = db.Guestbooks.Where(a =&gt; a.isPass == true); //如果查询到状态为通过的留言 return View(gb.OrderByDescending(a=&gt;a.CreatedOn).ToList()); //则根据创建留言时间进行倒序} 普通用户功能 发布个人留言 发布个人留言简要逻辑 首先在前端进行个人留言的输入，如果出现格式错误，则会在前端就进行提醒，使用的逻辑还是@Html.ValidationSummary()，和前面相同 前端验证格式成功之后，通过POST方式，提交到后台的User/CreateWords，再进行处理 后台首先获取登录的ID，自动添加到留言本中，再将留言本的这条记录保存到数据库中，最后将个人留言界面返回给用户 发布个人留言前端代码 12345678910111213141516&lt;form action=\"/User/CreateWords\" method=\"post\"&gt; &lt;table class=\"second\"&gt; &lt;tr&gt; &lt;td&gt;标题：&lt;/td&gt; &lt;td&gt;@Html.TextBoxFor(g =&gt; g.Title, new { @autocomplete = \"off\", autofocus=\"autofocus\"})&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容：&lt;/td&gt; &lt;td&gt;@Html.TextAreaFor(g =&gt; g.Content, new { cols = 50, rows = 10 })&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;&lt;/td&gt; &lt;td class=\"button\"&gt;&lt;input type=\"submit\" value=\"发布\" /&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt;&lt;/form&gt; 发布个人留言后台代码 12345678if (ModelState.IsValid){ gb.User = db.Users.Where(a =&gt; a.UserId == UserId).FirstOrDefault(); //找到登录用户的ID，自动添加到留言本中 //gb.CreatedOn = System.DateTime.Now; db.Guestbooks.Add(gb); //在数据库中添加这条记录 db.SaveChanges(); //保存数据库 return RedirectToAction(&quot;MyWords&quot;); //跳转到/User/MyWords，显示个人留言} 显示个人留言 显示个人留言简要逻辑 后台通过登录用户的ID，在数据库中进行查找，查找到的结果通过创建时间逆序传递给前端 前端通过foreach进行遍历，将结果进行输出，特别地是在是否通过审核这一栏，进行if判断，如果通过则显示审核通过，否则显示正在审核 显示个人留言前端代码 1234567891011121314151617@foreach (var gb in Model){&lt;tr class=\"clearfix\"&gt; &lt;td&gt;&lt;span&gt;@gb.User.Name&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.CreatedOn&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.Title&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.Content&lt;/span&gt;&lt;/td&gt; &lt;td&gt; &lt;span class=\"pass\"&gt; @if (gb.isPass == true) {@Html.DisplayName(\"审核通过\") } else {@Html.DisplayName(\"正在审核\")} &lt;/span&gt; &lt;/td&gt;&lt;/tr&gt;} 显示个人留言后台代码 12var gb = db.Guestbooks.Where(a =&gt; a.User.UserId == UserId);return View(gb.OrderByDescending(a=&gt;a.CreatedOn).ToList()); 显示全部留言 显示全部留言简要逻辑 使用的整体逻辑和主界面阅读全部留言类似 特别地是在普通用户界面可以较为详细地查看留言，例如可以多查看到留言本标题 显示全部留言前端代码 123456789@foreach (var gb in Model){&lt;tr class=\"clearfix\"&gt; &lt;td&gt;&lt;span&gt;@gb.User.Name&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.CreatedOn&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.Title&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.Content&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;} 显示全部留言后台代码 12345public ActionResult AllWords(){ var gb = db.Guestbooks.Where(a =&gt; a.isPass == true); return View(gb.OrderByDescending(a=&gt;a.CreatedOn).ToList());} 管理员功能 审核留言 审核留言简要逻辑 后台首先获取到所有未通过审核的留言，将这些留言按照创建时间逆序传递给前端 前端将这些留言进行显示，并在每一条留言后面都添加一个审核通过的按钮 点击审核通过的按钮，则跳转到Admin/CheckMessageToFind，进行确认是否通过审核 再显示确认通过审核的界面，让管理员用户进行进一步操作 审核留言前端代码 显示未通过审核的留言 12345678910@foreach (var gb in Model){&lt;tr class=\"clearfix\"&gt; &lt;td&gt;&lt;span&gt;@gb.User.Name&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.CreatedOn&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.Title&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.Content&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span class=\"button\"&gt;@Html.ActionLink(\"审核通过\", \"CheckMessageToFind\", new { id = gb.GuestbookId })&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;} 确认通过审核 1234567891011121314151617181920212223@using (Html.BeginForm()){ &lt;div class=\"info\"&gt; &lt;table class=\"confirmed\"&gt; &lt;tr&gt; &lt;td&gt;确认是否通过&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;留言人：@Model.User.Name&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容：@Model.Content&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;时间：@Model.CreatedOn&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"button\"&gt;&lt;input type=\"submit\" value=\"确认\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; @Html.ActionLink(\"X\", \"CheckIndex\", new { }, new { @class = \"close\" }) &lt;/div&gt;} 审核留言后台代码 显示所有未通过审核的留言 123456public ActionResult CheckIndex(){ GetUser(); var gb = db.Guestbooks.Where(a =&gt; a.isPass == false); //获取没有通过审核的留言本 return View(gb.OrderByDescending(a=&gt;a.CreatedOn).ToList()); //通过创建时间逆序，并传递给前端} 确认是否通过审核 123456public ActionResult CheckMessageToFind(int id){ GetUser(); var gb = db.Guestbooks.Find(id); //查找到留言本ID return View(gb); //返回确认界面，给管理员用户确认是否通过审核} 如果审核通过 123456789[HttpPost, ActionName(&quot;CheckMessageToFind&quot;)]public ActionResult CheckMessage(int id){ GetUser(); var gb = db.Guestbooks.Find(id); //获取留言本ID gb.isPass = true; //将通过状态设置为true db.SaveChanges(); //保存数据库 return RedirectToAction(&quot;CheckIndex&quot;); //返回到Admin/CheckIndex，显示还未通过的留言} 删除留言 删除留言简要逻辑 后台首先获取到所有可删除的留言，将这些留言按照创建时间逆序传递给前端 前端将这些留言进行显示，并在每一条留言后面都添加一个删除留言的按钮 点击删除留言的按钮，则跳转到`Admin/Delete，进行确认是否删除 再显示确认删除的界面，让管理员用户进行进一步操作 删除留言前端代码 显示所有能删除的留言 12345678910@foreach (var gb in Model){&lt;tr class=\"clearfix\"&gt; &lt;td&gt;&lt;span&gt;@gb.User.Name&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.CreatedOn&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.Title&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span&gt;@gb.Content&lt;/span&gt;&lt;/td&gt; &lt;td&gt;&lt;span class=\"button\"&gt;@Html.ActionLink(\"删除留言\", \"Delete\", new { id = gb.GuestbookId })&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;} 确认是否删除留言 1234567891011121314151617181920212223@using (Html.BeginForm()){ &lt;div class=\"info\"&gt; &lt;table class=\"confirmed\"&gt; &lt;tr&gt; &lt;td&gt;确认是否删除&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;留言人：@Model.User.Name&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;内容：@Model.Content&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;时间：@Model.CreatedOn&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td class=\"button\"&gt;&lt;input type=\"submit\" value=\"确认\"&gt;&lt;/td&gt; &lt;/tr&gt; &lt;/table&gt; @Html.ActionLink(\"X\",\"Index\", new { }, new { @class=\"close\"}) &lt;/div&gt;} 删除留言后台代码 显示所有可删除的留言 12345public ActionResult Index(){ GetUser(); return View(db.Guestbooks.OrderByDescending(db =&gt; db.CreatedOn).ToList()); //通过创建时间逆序，传递给前端} 是否删除留言 123456public ActionResult Delete(int id){ GetUser(); var gb = db.Guestbooks.Find(id); //找到这条留言的ID return View(gb); //返回确认删除的视图} 确认删除这条留言 123456789[HttpPost, ActionName(&quot;Delete&quot;)]public ActionResult DeleteConfirmed(int id){ GetUser(); var gb = db.Guestbooks.Find(id); //找到这条留言的ID db.Guestbooks.Remove(gb); //在数据库中删除这条留言 db.SaveChanges(); //保存数据库 return RedirectToAction(&quot;Index&quot;); //返回/Admin/Index} 三、部分额外功能超长文本省略处理 功能实现简要描述 超长文本进行省略处理，鼠标移动上去显示全文 在CSS中设置空白处理方式：不换行，超出部分隐藏和文本超出使用省略号 在JavaScript中获取到所有span标签，遍历所有的span如果其中文字的宽度大于元素的宽度，则将该span标签的title属性设置为其内容 CSS部分（以主页留言本显示为例） 12345678910.guestbook .main .list tr td span { display: inline-block; padding-left: 20px; height: 50px; text-align: center; line-height: 50px; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;} JavaScript部分 123456var spans = document.getElementsByTagName(\"span\")for (let i = 0; i &lt; spans.length; ++i) { if (spans[i].scrollWidth &gt; spans[i].offsetWidth) { spans[i].setAttribute(\"title\", spans[i].innerText) }} 用户验证 功能实现简要描述 必须登录后才可以使用普通用户和管理员操作 在普通用户控制器User和管理员控制器Admin中添加[Authorize] 如果在未登录的情况下，直接使用User或Admin中的方法，则会重定向到登录界面 只有在对应角色登录后，才可以使用对应角色的方法 在使用完对应角色的方法后，可以使用退出功能，进行账号退出 功能实现后台代码 Web.confi设置为表单验证 1234&lt;authentication mode=&quot;Forms&quot;&gt; &lt;forms loginUrl=&quot;/Account/LoginFirst&quot; defaultUrl=&quot;/&quot; timeout=&quot;30&quot; path=&quot;/&quot;&gt; &lt;/forms&gt;&lt;/authentication&gt; Login方法中进行设置 12345FormsAuthenticationTicket ticket = new FormsAuthenticationTicket(1, user.UserId.ToString(), DateTime.Now, DateTime.Now.AddMinutes(30), false, user.SRole.ToString());string hashTicket = FormsAuthentication.Encrypt(ticket);HttpCookie cookie = new HttpCookie(FormsAuthentication.FormsCookieName, hashTicket);cookie.HttpOnly = true;Response.Cookies.Add(cookie); 在普通用户控制器User和管理员控制器Admin中添加[Authorize]，使其进行验证 账号退出 12345public ActionResult Logout(){ FormsAuthentication.SignOut(); return RedirectToAction(&quot;Index&quot;, &quot;GuestBook&quot;);} 四、其他实现数据库实现 数据库上下文 123456public class GBSDBContext : DbContext{ public DbSet&lt;Guestbook&gt; Guestbooks { get; set; } public DbSet&lt;Admin&gt; Admins { get; set; } public DbSet&lt;User&gt; Users { get; set; }} 用户角色信息 123456789101112131415161718public class User{ public int UserId { get; set; } [System.ComponentModel.DataAnnotations.Required(ErrorMessage = &quot;邮箱不能为空&quot;)] [EmailAddress(ErrorMessage =&quot;邮箱格式不对&quot;)] public string Email { get; set; } [Unique] [System.ComponentModel.DataAnnotations.Required(ErrorMessage = &quot;用户名不能为空&quot;)] [MaxLength(10,ErrorMessage =&quot;用户名长度不能大于10个字符&quot;)] public string Name { get; set; } [System.ComponentModel.DataAnnotations.Required(ErrorMessage = &quot;密码不能为空&quot;)] [MaxLength(20, ErrorMessage = &quot;密码长度不能大于20个字符&quot;)] [MinLength(6,ErrorMessage =&quot;密码长度不能少于6个字符&quot;)] [DataType(DataType.Password)] public string Password { get; set; } public SystemRole SRole { get; set; } public virtual ICollection&lt;Guestbook&gt; Guestbooks { get; set; }} 留言本信息 1234567891011121314public class Guestbook{ public int GuestbookId { get; set; } [Required(ErrorMessage = &quot;留言标题不能为空&quot;)] [MaxLength(20, ErrorMessage = &quot;留言标题不超过20个字符&quot;)] public string Title { get; set; } //留言标题 [Required(ErrorMessage = &quot;留言内容不能为空&quot;)] [MinLength(1, ErrorMessage = &quot;留言内容不少于1个字符&quot;)] public string Content { get; set; } //留言内容 [DatabaseGenerated(DatabaseGeneratedOption.Computed)] public DateTime CreatedOn { get; set; } //创建日期时间 public bool isPass { get; set; } public virtual User User { get; set; }} 默认模板实现 账号登录、注册部分 12345678910111213141516171819202122232425262728293031323334353637383940&lt;!DOCTYPE html&gt;&lt;html lang=\"en\"&gt;&lt;head&gt; &lt;meta charset=\"UTF-8\"&gt; &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt; &lt;title&gt;@ViewBag.Title&lt;/title&gt; &lt;link rel=\"stylesheet\" href=\"~/Content/guestbook-index.css\"&gt; &lt;link href=\"~/IconFont/fa/css/all.min.css\" rel=\"stylesheet\" /&gt; &lt;link href=\"~/IconFont/iconfont/iconfont.css\" rel=\"stylesheet\" /&gt;&lt;/head&gt;&lt;body&gt; &lt;img class=\"img\" src=\"~/Image/bg.jpg\"&gt; &lt;div class=\"guestbook clearfix\"&gt; &lt;div class=\"main\"&gt; &lt;div class=\"back\"&gt; &lt;a href=\"/GuestBook/Index\"&gt; &lt;i class=\"fas fa-angle-double-left\"&gt;&lt;/i&gt; &lt;span&gt;返回&lt;/span&gt; &lt;/a&gt; &lt;/div&gt; &lt;div class=\"title\"&gt; &lt;span&gt;欢迎访问留言本&lt;/span&gt; &lt;/div&gt; &lt;div class=\"buttons\"&gt; &lt;div class=\"button login\"&gt; &lt;span&gt;@Html.ActionLink(\"用户登录\", \"Login\", \"Account\")&lt;/span&gt; &lt;/div&gt; &lt;div class=\"button register\"&gt; &lt;span&gt;@Html.ActionLink(\"用户注册\", \"Register\", \"Account\")&lt;/span&gt; &lt;/div&gt; &lt;/div&gt; &lt;div class=\"main-login\"&gt; @RenderBody() &lt;/div&gt; &lt;footer&gt; &lt;p&gt;&amp;copy; 2020-@DateTime.Now.Year RuanXinWei版权所有&lt;/p&gt; &lt;/footer&gt; &lt;/div&gt; &lt;/div&gt;&lt;/body&gt; 后台部分 12345678910111213141516171819&lt;!DOCTYPE html&gt;&lt;html lang=&quot;en&quot;&gt;&lt;head&gt; &lt;meta charset=&quot;UTF-8&quot;&gt; &lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt; &lt;title&gt;@ViewBag.NAME 后台&lt;/title&gt; &lt;link rel=&quot;stylesheet&quot; href=&quot;/Content/admin-index.css&quot;&gt;&lt;/head&gt;&lt;body&gt; &lt;div class=&quot;title&quot;&gt; &lt;div class=&quot;welcome&quot;&gt; 欢迎 @ViewBag.NAME ! &lt;/div&gt; &lt;/div&gt; &lt;div class=&quot;main clearfix&quot;&gt; @RenderBody() &lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 五、主要结果截图 留言本主页面 注册页面 登录页面 用户页面 管理员页面 确认信息页面 小结​ 首先，我很庆幸选择了学习.NET架构，因为通过学习这门课程，让我了解到了前端和后台可以通过MVC进行配合。就在今年完成数据库课程设计的时候，我就十分迷茫，不知道该如何将前端和后台进行配合，虽然最后使用了PHP进行后台操作数据库完成了课程设计，但是深刻体会到了用字符串保存SQL，网站整体样式的设计等痛苦。 ​ 但是在我学习完.NET架构后，学会了用Code-first来操作数据库，这种方式不仅能够避免在编写SQL的时候出现字符错误，还能够很好地进行保存，修改等一系列操作，通过类操作数据库的好处就从而体现出来了。还有在为网站设计整体风格的时候，通过添加布局页，一方面大大减少了代码的冗余量，另一方面也提高了开发的效率。 ​ 总的来说，从最开始的客户端技术编程到最后的MVC编程，让我慢慢从只会做一些简单的样式到能够实现一些具有实际意义的样式，让我从只会做样式到能够配合后台来实现一个实际的网站。到最后，回顾这门课的学习，虽然过程真的很苦，每天熬夜干代码，但是收获到的结果也是十分丰厚的。","link":"/2020/12/10/%E5%88%9D%E5%85%A5MVC-%E4%BB%8E%E5%89%8D%E7%AB%AF%E5%88%B0%E5%90%8E%E5%8F%B0/"},{"title":"Flask学习笔记","text":"Flask是目前最流行的Python Web框架之一 初识Flask搭建开发环境安装pip和Pipenv123$ pip --version //检查pip是否安装$ pip install pipenv //使用pip安装Pipenv$ pipenv install //为当前项目创建虚拟环境 &gt; 如果pip install过程中下载很慢，则修改Pifile中的源为`url = &quot;https://pypi.tuna.tsinghua.edu.cn/simple/&quot;`安装Flask12$ pipenv install flask //安装flask$ pipenv update flask //更新flaskHello，Flask！切换到当前目录1$ cd demos/hello创建程序实例12from flask import Flaskapp = Flask(__name__)注册路由123456789101112131415161718# 简单注册路由@app.route('/')def index(): return '&lt;h1&gt;Hello, World!&lt;/h1&gt;'# 为视图绑定多个URL@app.route('/hi')@app.route('/hello')def say_hello(): return '&lt;h1&gt;Hello, Flask!&lt;/h1&gt;'# 动态URL@app.route('/greet', defaults={'name': 'Programmer'}) # 设置默认值@app.route('/greet/&lt;name&gt;')def greet(name): return '&lt;h1&gt;Hello, %s!&lt;/h1&gt;' % name启动开发服务器 通过命令行 1$ flask run PyCharm配置 Target type：Module name（必选） Target：（必填） Additional options：–host=127.0.0.1 –port=5000（可填） FLASK_ENV：development（必填） Working directory：&lt;工作目录&gt;（必填）URL与端点 使用http://127.0.0.1:1234/test/addi进行访问 如果动态路由没有设置默认值 12345@app.route('/test/&lt;additional&gt;')def test(additional): # 第一个additional是test的形参，第二个additional是URL传入进来的 part_url = url_for('test', additional=additional) # /test/addi all_url = url_for('test', additional=additional, _external=True) # http://127.0.0.1:1234/test/addi 如果动态路由设置了默认值12345@app.route('/test', defaults={'additional': 'default'})@app.route('/test/&lt;additional&gt;')def test(additional): part_url = url_for('test') # /test all_url = url_for('test', _external=True) # http://127.0.0.1:1234/test url_for是用来获取要使用某一方法的最简洁URL 模板模板基本用法三种定界符 语句 1{% ... %} 表达式 1{{ ... }} 注释 1{# ... #} 语句结束标签 if-else 12345{% if ... %} //if 语句{% else ... %} //else 语句{% endif %} for 123{% for i in ... %} //for语句{% endfor %} 模板语法 变量名 说明 loop.index 当前迭代数（从1开始计数） loop.index0 当前迭代数（从0开始计数） loop.revindex 当前反向迭代数（从1开始计数） loop.revindex0 当前反向迭代数（从0开始计数） loop.first 如果是第一个元素，则为True loop.last 如果是最后一个元素，则为True loop.previtem 上一个迭代的条目 loop.nextitem 下一个迭代的条目 loop.length 序列包含的元素数量 渲染模板使用Flask提供的渲染函数render_template()1234from flask import Flask, render_template@app.route('/watchlist')def watchlist(): return render_template('watchlist.html', user=user, movies=movies)模板辅助工具上下文 自定义上下文变量 123456{% set navigation = [{'/', 'Home'}, {'/about', 'About'}] %}{% set navigation %} &lt;li&gt;&lt;a href=\"/\"&gt;Home&lt;/a&gt;&lt;/li&gt; &lt;li&gt;&lt;a href=\"/about\"&gt;About&lt;/a&gt;&lt;/li&gt;{% endset %} 内置上下文变量 变量 说明 config 当前的配置对象 request 当前的请求对象，在已激活的请求环境下可用 session 当前的会话对象，在已激活的请求环境下可用 g 与请求绑定的全局变量，在已激活的请求环境下可用 自定义上下文 设置模板全局变量 1234567891011# 1. 注册模板上下文处理函数@app.context_processordef inject_foo(): foo = 'I am foo.' return dict(foo=foo)# 2. 添加现有函数app.context_processor(inject_foo)# 3.使用lambda简化app.context_processor(lambda: dict(foo='I am foo.')) 全局对象 内置全局函数 函数 说明 range([start, ]stop[, step]) 和Python中的range()用法相同 lipsum(n = 5, html = True, min = 20, max = 100 生成随机文本 dict(**item) 和Python中的dict()用法相同 url_for() 用于生成URL的函数 get_flashed_message() 用于获取flash消息的函数 自定义全局函数 1234567# 1. 注册全局函数@app.template_global()def bar(): return 'I am bar.'# 2. 添加全局函数@app.add_template_global(bar) 过滤器 用法 1234567# 1. 对变量进行过滤{{ name|title }}# 2. 对模板进行过滤{% filter upper %} This text becomes uppercase.{% endfilter %} 内置过滤器 过滤器 说明 default(value, default_value=u”, boolean=False) 设置默认值，默认值作为参数传入，别名为d escape(s) 转义HTML文本，别名为e first(seq) 返回序列的第一个元素 last(seq) 返回序列的最后一个元素 length(object) 返回变量的长度 random(seq) 返回序列中的随机元素 safe(value) 将变量值标记为安全，避免转义 trim(value) 清除变量值前后的空格 max(value, case_sensitive = False, attribute = None 返回序列中的最大值 min(value, case_sensitive = False, attribute = None 返回序列中的最小值 unique(value, case_sensitive = False, attribute = None 返回序列中的不重复的值 striptags(value) 清除变量值内的HTML标签 urlize(value, trim_url_limit = None, nofollow = False, target = None, rel = None 将URL文本转换成可单击的HTML链接 wordcount(s) 计算单词数量 tojson(value, indent = None) 将变量值转换为JSON格式 truncate(s, length = 255, killwords = False, end=’…’, leeway=None 截断字符串，常用于显示文章摘要，length参数设置截断的长度，killwords参数设置是否截断单词，end参数设置结尾的符号 自定义过滤器 12345678# 1. 注册自定义过滤器from flask import Markup@app.template_filter()def musical(s): return s + Markup(' &amp;#9835;')# 2. 添加方式注册app.add_template_filter(musical) 在使用过滤器时，竖线符号左边的值，是过滤器函数的第一个值，其他参数可以通过添加括号传入测试器 用法 12345{% if age is number %} {{ age * 365 }}{% else %} 无效数字{% endif %} 内置测试器 测试器 说明 callable(object) 判断对象是否可被调用 defined(value) 判断变量是否已定义 undefined(value) 判断变量是否未定义 none(value) 判断变量是否为None number(value) 判断变量是否是数字 string(value) 判断变量是否是字符串 sequence(value) 判断变量是否是序列，比如字符串、列表、元组 iterable(value) 判断变量是否可迭代 mapping(value) 判断变量是否是匹配对象，比如字典 sameas(value, other) 判断变量与other是否指向相同的内存地址 自定义测试器 123456789# 1. 注册自定义测试器@app.template_test()def baz(n): if n == 'baz': return True return False# 2. 添加注册自定义测试器app.add_template_test(baz) 在使用测试器时，is的左侧是测试器函数的第一个参数(value)，其他参数可以添加括号传入，也可以在右侧使用空格连接，以sameas为例： 123{% if foo is sameas(bar) %}# 等同于{% if foo is sameas bar %} 模板环境对象 添加自定义全局对象 1app.jinja_env.globals['bar'] = bar 添加自定义过滤器 1app.jinja_env.filters['smiling'] = smiling 添加自定义测试器 1app.jinja_env.tests['baz'] = baz 模板结构组织局部模板 提示：为了和普通模板区分开，局部模板的命名通常以一个下划线开始 用法 12# 在任意位置，使用以下代码插入局部模板{% include '_xxx.html' %} 宏 简单示例 1234567{% macro qux(amount=1) %} {% if amount == 1 -%} I am qux. {%- elif amount &gt; 1 -%} We are quxs. {%- endif %}{% endmacro %} 用法 123{% from 'macros.html' import qux %}# ...{{ qux(amount = 5) }} 默认情况下，包含（include）一个局部模板会传递当前上下文到局部模板中，但是导入（import）不会。如果想要导入（import）也传递当前上下文，则需要显式地使用with context。 1{% from 'macros.html' import qux with context %} 模板继承 编写基模板，通常命名为base.html或layout.html 12{% block head %}{% endblock %} 编写子模板 覆盖内容 1234{% extend 'base.html' %}{% block head %}{# ... #}{% endblock %} 追加内容 1234{% extend 'base.html' %}{{ super() }}{# ... #}{% endblock %} 模板进阶实践空白控制 渲染时自动去除右边空格 1{% -%} 渲染时自动去除左边空格 1{%- %} 利用环境对象 1234# 删除Jinja2语句后的第一个空行app.jinja_env.trim_blocks = True# 删除Jinja2语句所在行之前的空格和制表符app.jinja_env.lstrip_block = True 需要注意：宏内的空白控制行为不受trim_blocks和lstrip_blocks属性控制，需要手动控制加载静态文件 默认将静态文件存储在与主脚本同级目录的static文件夹中 通过url_for('static', filename='avatar.jpg')获取到/static/avatar.jpg 添加Favicon 添加文件favicon.ico到static目录下 在&lt;head&gt;部分添加一个&lt;link&gt;元素 1&lt;link rel=\"icon\" type=\"image/x-icon\" href=\"{{ url_for('static', filename='favicon.ico') }}\"&gt; 使用宏加载静态资源 123456789101112{% macro static_file(type, filename_or_url, local=True) %} {% if local -%} {% set filename_or_url = url_for('static', filename=filename_or_url) %} {%- endif %} {% if type == 'css' -%} &lt;link rel=\"stylesheet\" href=\"{{ filename_or_url }}\" type=\"text/css\"&gt; {%- elif type == 'js' -%} &lt;script type=\"text/javascript\" src=\"{{ filename_or_url }}\"&gt;&lt;/script&gt; {%- elif type == 'icon' -%} &lt;link rel=\"icon\" href=\"{{ filename_or_url }}\"&gt; {%- endif %}{% endmacro %} 1234# 1. 加载静态资源static_file('css', '/css/bootstrap.min.css')# 2. 从CDN加载资源static_file('css', 'https://.../css/bootstrap.min.css', local=False) 消息闪现 使用flash()函数闪现 1flash('flash message.') 使用get_flashed_messages()在模板中获取消息 123{% for message in get_flashed_messages() %} &lt;div class=\"alert\"&gt;{{ message }}&lt;/div&gt;{% endfor %} 自定义错误页面1234from flask import Flask, render_template@app.errorhandler(404)def page_not_found(e): return render_template('errors/404.html'), 404 JavaScript和CSS中的Jinja2 定义为JavaScript变量 定义 1&lt;span data-id=\"{{ user.id }}\" data-username=\"{{ user.username }}\"&gt;{{ user.username }}&lt;/span&gt; 使用 123element.dataset.usernameelement.getAttribute('data-username')$element.data('username') 定义为CSS变量 定义 123456&lt;style&gt;:root { --theme-color: {{ theme_color }}; --background-url: {{ url_for('static', filename='background.jpg') }}}&lt;/style&gt; 使用 1234567#foo { color: var(--theme-color);}#bar { background: var(--background-url);}","link":"/2021/01/23/Flask%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"},{"title":"前端学习笔记","text":"人生就是一种平衡简简单单才是真，平平淡淡才是福人之所以痛苦，就在于追求了过多不属于自己的东西懂得知足的人，即使粗茶淡饭，也能够尝出人生的美味与其在遗憾中郁郁寡欢，不如好好珍惜自己的拥有，这样才能收获更多的快乐 Front-End-LearningHTML5介绍css修饰过的html标签123456789101112&lt;head&gt; h1{ font-size: 12px; color: #930; text-align: center; }&lt;/head&gt;&lt;body&gt; &lt;h1&gt; Hello World! &lt;/h1&gt;&lt;/body&gt; HTML5文档结构12345678910&lt;!DOCTYPE html&gt; &lt;!--声明文档结构为html5--&gt;&lt;html&gt; &lt;!--html标签为html文件的根标签--&gt; &lt;head&gt; &lt;!--head标签为头部标签，一般存放meta和title标签等--&gt; &lt;meta charset = \"UTF-8\"&gt; &lt;!--声明当前文档字符集编码为UTF-8--&gt; &lt;title&gt;HTML5文档结构&lt;/title&gt; &lt;!--title标签设置为浏览器标题--&gt; &lt;/head&gt; &lt;body&gt; &lt;!--body标签为网页内容--&gt; &lt;/body&gt;&lt;/html&gt; HTML5注释1&lt;!--这里是注释--&gt; HTML5 语义化标签段落标签1&lt;p&gt;段落文本&lt;/p&gt; &lt;p&gt;标签的默认格式：在段前段后都会有空白，可以使用css样式来改变。 自定义文本样式&lt;span&gt;文本&lt;/span&gt; 然后在 span{ coror:blue; } 文章标题12345678&lt;body&gt; &lt;h1&gt;一级标题&lt;/h1&gt; &lt;h2&gt;二级标题&lt;/h2&gt; &lt;h3&gt;三级标题&lt;/h3&gt; &lt;h4&gt;四级标题&lt;/h4&gt; &lt;h5&gt;五级标题&lt;/h5&gt; &lt;h6&gt;六级标题&lt;/h6&gt;&lt;/body&gt; 标题标签一共有6个：h1，h2，h3，h4，h5，h6。 标题组1234&lt;hgroup&gt; &lt;h1&gt;题目&lt;/h1&gt; &lt;h2&gt;作者&lt;/h2&gt;&lt;/hgroup&gt; 语调强调1&lt;em&gt;语调强调&lt;/em&gt; 语义强调1&lt;strong&gt;语义强调&lt;/strong&gt; 长引用123&lt;blockquote&gt; 长引用&lt;/blockquote&gt; 短引用1&lt;q&gt;短引用&lt;/q&gt; 自定义块1&lt;div&gt;...&lt;/div&gt; 相当于独立板块，容器。 标签定义头部区域1&lt;header&gt;头部标签&lt;/header&gt; 标签定义主要区域12&lt;!-- 只能有一个 --&gt;&lt;main&gt;主要标签&lt;/main&gt; 标签定义底部区域1&lt;footer&gt;底部标签&lt;/footer&gt; 定义区段1&lt;section&gt;区域&lt;/section&gt; 侧边栏1&lt;aside&gt;侧边栏&lt;/aside&gt; 导航1&lt;nav&gt;&lt;/nav&gt; 文章1&lt;article&gt;&lt;/article&gt; HTML5效果标签换行效果1&lt;br/&gt; 在换行的地方添加&lt;br/&gt;。 注意：&lt;br/&gt;是空标签，只需要写一个开始标签，类似的有&lt;hr/&gt;和&lt;img/&gt;。 空格效果1&amp;nbsp; 使用特殊字符&amp;nbsp;来表示空格。 水平分割线效果1&lt;hr/&gt; 使用&lt;hr/&gt;来实现水平分割线效果 HTML5列表标签无序列表1234&lt;ul&gt; &lt;li&gt;第一个无序列表&lt;/li&gt; &lt;li&gt;第二个无序列表&lt;/li&gt;&lt;/ul&gt; 有序列表1234&lt;ol&gt; &lt;li&gt;第一个有序列表&lt;/li&gt; &lt;li&gt;第二个有序列表&lt;/li&gt;&lt;/ol&gt; 定义列表1234&lt;dl&gt; &lt;dt&gt;列标题&lt;/dt&gt; &lt;dd&gt;解释&lt;/dd&gt;&lt;/dl&gt; HTML5图片，链接及表格标签图片标签1&lt;img src = \"图片地址\" alt = \"下载失败时的替换文本\" title = \"提示文本\" width=\"宽度像素\" height=\"高度像素\"&gt; 图片格式 jpeg（jpg） 支持颜色比较丰富，不支持透明效果，不支持动图 一般用来显示图片 gif 支持的颜色比较少，支持简单透明，支持动图 一般用来显示简单单一的图片，动图 png 支持的颜色丰富，支持复杂透明，不支持动图 颜色丰富，复杂透明图片 webp 谷歌推出专门用来表示网页图片的一种格式 兼容其他图片的所有优点，而且文件特别小 缺点：兼容性不好 base64 将文件使用base64编码，通过字符来引入图片 主要用于需要和网页一起加载的图片 选用图片格式的标准 效果一样，用小的 效果不同，用好的 超链接标签1&lt;a href = \"目标网址\" title = \"提示文本\"&gt;链接显示文本&lt;/a&gt; 相对路径 ./：表示当前文件的目录； ../：表示当前文件的上一级目录； 如果不存在，则默认为./。 跳转当前页面指定位置12&lt;a href=\"#\"&gt;跳转到顶部&lt;/a&gt;&lt;a href=\"#idposition\"&gt;跳转到id属性为idposition的位置&lt;/a&gt; 超链接占位符1&lt;a href=\"javascript:;\"&gt;超链接占位符&lt;/a&gt; 新窗口或原窗口打开超链接1234&lt;!--在当前页面打开超链接--&gt;&lt;a href = \"目标网址\" target = \"_self\"&gt;链接提示文本&lt;/a&gt;&lt;!--在新页面打开超链接--&gt;&lt;a href = \"目标网址\" target = \"_blank\"&gt;链接提示文本&lt;/a&gt; 生成一段英文文本使用lorem 表格标签123456789101112131415&lt;!--border属性为表格添加边框--&gt;&lt;table border = \"1\"&gt; &lt;!--表格标题--&gt; &lt;caption&gt;表格标题&lt;/caption&gt; &lt;!--表示每一行使用&lt;tr&gt;--&gt; &lt;tr&gt; &lt;!--默认加粗并居中--&gt; &lt;th&gt;表格第一列的标题&lt;/th&gt; &lt;th&gt;表格第二列的标题&lt;/th&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;表格第二行第一列内容&lt;/td&gt; &lt;td&gt;表格第二行第二列内容&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt; 使用thead、tbody、tfoot定义表格123456789101112131415161718192021222324252627&lt;!--border属性为表格添加边框--&gt;&lt;table border = \"1\"&gt; &lt;!--表格标题--&gt; &lt;caption&gt;表格标题&lt;/caption&gt; &lt;!--表头--&gt; &lt;thead&gt; &lt;tr&gt; &lt;!--默认加粗并居中--&gt; &lt;th&gt;表头第一列的标题&lt;/th&gt; &lt;th&gt;表头第二列的标题&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;!--表身--&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;表身第一行第一列内容&lt;/td&gt; &lt;td&gt;表身第一行第二列内容&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt; &lt;!--表尾--&gt; &lt;tfoot&gt; &lt;tr&gt; &lt;td&gt;表尾第一行第一列内容&lt;/td&gt; &lt;td&gt;表尾第一行第二列内容&lt;/td&gt; &lt;/tr&gt; &lt;/tfoot&gt;&lt;/table&gt; HTML5内联框架、音视频标签内联框架12&lt;!-- frameborder=\"0\"代表没有边框 frameborder=\"1\"代表有边框 --&gt;&lt;iframe src=\"引入的地址\" weight=\"宽度\" height=\"高度\" frameborder=\"0\"&gt;&lt;/iframe&gt; 音频标签12345678910111213&lt;!-- controls 是否允许用户控制播放 autoplay 音频文件是否自动播放，但大多数浏览器不会自动播放 loop 音频是否循环播放 --&gt;&lt;audio src=\"音频地址\" controls autoplay loop&gt;&lt;/audio&gt;&lt;!-- 使用source指定文件位置 --&gt;&lt;audio controls&gt; &lt;source src=\"./xxx.mp3\"&gt; &lt;source src=\"./xxx.ogg\"&gt; &lt;embed src=\"./xxx.mp3\" type=\"audio/mp3\" width=\"400\" height=\"300\"&gt;&lt;/audio&gt; 视频标签12345678910111213141516&lt;!-- controls 是否允许用户控制播放 autoplay 视频文件是否自动播放，但大多数浏览器不会自动播放 loop 视频是否循环播放 --&gt;&lt;!-- 用法和audio基本一样 --&gt;&lt;!-- 使用source指定文件位置 --&gt;&lt;video controls&gt; &lt;source src=\"./xxx.webm\"&gt; &lt;source src=\"./xxx.mp4\"&gt; &lt;embed src=\"./xxx.mp4\" type=\"video/mp4\"&gt;&lt;/video&gt;&lt;!-- 还可以通过其他视频网站的视频分享进网页中 --&gt; HTML5表单标签创建表单123&lt;form method = \"传送方式\" action = \"服务器文件\"&gt; ...&lt;/form&gt; &lt;form&gt;：创建表单标签； method：数据传送方式（get / post）； action：输入的数据传送的地方，例如”save.php”。 文本输入框、密码输入框1234&lt;form&gt; &lt;input type = \"text\" name = \"text\" value = \"text\"&gt; &lt;input type = \"password\" name = \"password\" value = \"password\"&gt;&lt;/form&gt; type： 当type = “text”时，输入框为文本输入框； 当type = “password”时，输入框为密码输入框。 name：文本框变量名。 value：文本框默认值。 placehorder属性12&lt;input type = \"text\" placehorder = \"请输入用户名\"&gt;&lt;input type = \"password\" placehorder = \"请输入密码\"&gt; placehorder属性为输入框占位符，里面放文本框提示信息； 当输入框内容为空提示信息才显示，当输入框内容不为空提示信息消失； placehorder的内容不是输入框中真正的内容。 数字输入框1&lt;input type = \"number\"&gt; 输入框只能输入数字； 输入框右侧有加减符号，可以调整数字大小。 网址输入框1&lt;input type = \"url\"&gt; 网址输入框的值需要以http://或者https://开头，并且后面必须有内容，否则表单提交时会报错提示。 邮箱输入框1&lt;input type = \"email\"&gt; 邮箱输入框中的值必须包含@，并且之后必须要有内容，否则表单提交时会有报错提示。 文本域1&lt;textarea cols = \"50\" rows = \"10\"&gt;在这里输入内容&lt;/textarea&gt; cols：输入域的列数； rows：输入域的行数； &lt;textarea&gt;和&lt;/textarea&gt;之间可以输入默认值。 laber标签1234&lt;form &lt;label for = \"email\"&gt;输入你的邮箱地址&lt;/label&gt; &lt;input type = \"email\" id = \"email\" placeholder = \"Enter email\"&gt;&lt;/form&gt; laber标签中for属性的值必须与相关的控件id值相同 单选框、复选框1&lt;input type = \"radio/checkbox\" value = \"值\" name = \"名称\" checked = \"checked\"&gt; type： 当type = “radio”时，控件为单选框；特别注意：对于同一组选项，name值必须相同，才能做到单选的效果 当type = “checkbox”时，控件为多选框。 value：提交数据到服务器的值（后台程序PHP使用。 name：为控件命名，以备后台程序 ASP、PHP 使用。 checked：当设置 checked=”checked” 时，该选项被默认选中。 下拉菜单12345678&lt;form&gt; &lt;select&gt; &lt;option value=\"看书\"&gt;看书&lt;/option&gt; &lt;option value=\"运动\"&gt;运动&lt;/option&gt; &lt;option value=\"购物\"&gt;购物&lt;/option&gt; &lt;option value=\"旅游\" selected = \"selected\"&gt;旅游&lt;/option&gt; &lt;/select&gt;&lt;/form&gt; select和option标签都是双标签，它总是成对出现的，需要首标签和尾标签； select标签里面只能放option标签，表示下拉列表的选项； option： 标签放选项内容，不放置其他标签； 标签之间为显示选项的内容。 value：向服务器提交的值； selected：设置selected=”selected”属性，则该选项就被默认选中。 提交按钮、重置按钮12&lt;input type=\"submit\" value=\"提交\" name=\"submitBtn\"&gt;&lt;input type=\"reset\" value=\"重置\" name=\"resetBtn\"&gt; type： 当type = “submit”时，为提交按钮； 当type = “reset”时，为重置按钮。 value：按钮上的值； name：按钮控件名。 CSS3介绍认识CSS样式12345p{ font-size: 12px; color: red; font-weight: bold;} 使用CSS样式的一个好处是通过定义某个样式，可以让不同网页位置的文字有着统一的字体、字号或者颜色等。 短语样式123span{ color: red;} 使用&lt;span&gt;和&lt;/span&gt;括起短语实现样式修改。 CSS代码语法1p{ color: blue; } p是选择符；又称选择器，指明网页中要应用样式规则的元素。 color是属性； blue是值； “{ }”中的就是声明；属性和值之间用:分隔，多条声明用;分隔。 一般为了便于阅读，每一条声明都占一行。 CSS注释代码1/*这里是注释*/ CSS样式代码插入形式-内联式1&lt;p style = \"color: red\"&gt;这里的文字是红色&lt;/p&gt; 多条css样式则用;隔开。 CSS样式代码插入形式-嵌入式12345&lt;style type = \"text/css\"&gt;span{ color: red;}&lt;/style&gt; 嵌入式css样式必须写在&lt;style&gt;和&lt;/style&gt;之间，并且一般情况下，嵌入式css样式写在&lt;head&gt;和&lt;/head&gt;之间。 CSS样式代码插入形式-外部式12345/*style.css*/span{ color: blue; font-size: 20px;} 1234&lt;!--index.html--&gt;&lt;head&gt; &lt;link href = \"style.css\" rel = \"stylesheet\" type = \"text/css\" /&gt;&lt;/head&gt; 将css代码写在另外一个单独的外部文件中，文件以.css结尾 在&lt;head&gt;中使用&lt;link&gt;将文件链接到HTML文件中。 rel=&quot;stylesheet&quot; type=&quot;text/css&quot;是固定写法不可修改； &lt;link&gt;标签位置一般写在&lt;head&gt;标签之内。 三种链接方式优先级现在不考虑权值的情况。 就近原则，离被设元素越近优先级越高； 一般来说，外部式 &lt; 嵌入式 &lt; 内联式，因为在实际开发中一般都是&lt;link&gt;代码在&lt;style&gt;代码前面。 CSS3选择器选择器每一条css样式定义由两部分组成，形式如下： 123选择器{ 样式;} 类选择器语法： 1.类选器名称{css样式代码} 英文圆点开头； 类选器可任意取名，但不能取中文； 例如：将类选器标注为红色 1234567&lt;style type = \"text/css\"&gt;.classname{ color: red;}&lt;/style&gt;&lt;span class = \"classname\"&gt;类选器&lt;/span&gt; ID选择器语法： 1#ID选择器名称{css样式代码}; 使用ID选择器，必须给标签添加上id属性，为标签设置id=”ID名称”，而不是class=”类名称”。 ID选择符的前面是井号（#）号，而不是英文圆点（.）。 例如：将ID选择器标注为红色 1234567&lt;style type = \"text/css\"&gt;#idname{ color: red;}&lt;/style&gt;&lt;span id = \"idname\"&gt;ID选择器&lt;/span&gt; 类选择器和ID选择器的区别 ID选择器只能够在文档中使用一次，类选择器可以使用多次；如：可以出现多次&lt;span class = &quot;classname&quot;&gt;&lt;/span&gt;而只能出现一次&lt;span id = &quot;idname&quot;&gt;&lt;/span&gt; 类选择器可以使用词列表方式为同一个元素同时设定多种样式，ID选择器不可以使用词列表。如：为类选择器词列表使用两种样式 123456789&lt;style type = \"text/css\"&gt;.classname1{ color: red;}.classname2{ font-size: 12px;}&lt;/style&gt;&lt;span class = \"classname1 classname2\"&gt;类选择器词列表&lt;/span&gt; 子选择器&gt;（大于号）：用于选择指定标签元素的第一代子元素。 12345678910111213141516171819202122232425&lt;style type=\"text/css\"&gt;/*添加边框样式（粗细为1px， 颜色为红色的实线）*/.food&gt;li { border: 1px solid red;}&lt;/style&gt;&lt;ul class=\"food\"&gt;/*水果一个边框，框住了&lt;li&gt;&lt;/li&gt;之间的所有*/ &lt;li&gt;水果 &lt;ul&gt; &lt;li&gt;香蕉&lt;/li&gt; &lt;li&gt;苹果&lt;/li&gt; &lt;li&gt;梨&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;/*蔬菜一个边框*/ &lt;li&gt;蔬菜 &lt;ul&gt; &lt;li&gt;白菜&lt;/li&gt; &lt;li&gt;油菜&lt;/li&gt; &lt;li&gt;卷心菜&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 后代选择器&amp;nbsp;（空格）：（只是简单的空格，此处为了显示使用了空格符号）加入空格，用于选择指定标签元素下的后代所有元素。 12345678910111213141516171819202122232425262728293031&lt;style type=\"text/css\"&gt;/*添加边框样式（粗细为1px， 颜色为红色的实线）*/.food li { border: 1px solid red;}&lt;/style&gt;&lt;ul class=\"food\"&gt;/*水果一个边框，框住了&lt;li&gt;&lt;/li&gt;之间的所有*/ &lt;li&gt;水果 &lt;ul&gt; /*香蕉一个边框*/ &lt;li&gt;香蕉&lt;/li&gt; /*苹果一个边框*/ &lt;li&gt;苹果&lt;/li&gt; /*梨一个边框*/ &lt;li&gt;梨&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;/*蔬菜一个边框*/ &lt;li&gt;蔬菜 &lt;ul&gt; /*白菜一个边框*/ &lt;li&gt;白菜&lt;/li&gt; /*油菜一个边框*/ &lt;li&gt;油菜&lt;/li&gt; /*卷心菜一个边框*/ &lt;li&gt;卷心菜&lt;/li&gt; &lt;/ul&gt; &lt;/li&gt;&lt;/ul&gt; 兄弟选择器 +:选择下一个兄弟元素 ~:选择下面所有兄弟元素 123456789/* 选择p标签后面的第一个兄弟span标签 */p+span{ color: red;}/* 选择p标签后面的所有兄弟span标签 */p~span{ color: green;} 通用选择器*（星号）：用于匹配HTML中所有的标签元素。 12345678910&lt;style type=\"text/css\"&gt;* { color: red; font-size: 20px;}&lt;/style&gt;/*所有标签下元素字体全部为红色，大小为20px*/&lt;h1&gt;一级标题&lt;/h1&gt;&lt;p&gt;文章&lt;/p&gt; 属性选择器 [属性名] 选择含有指定属性的元素 [属性名=属性值] 选择含有指定属性和指定属性值的元素 [属性名^=属性值] 选择含有指定属性和指定值开头的属性值的元素 [属性名$=属性值] 选择含有指定属性和指定值结尾的属性值的元素 [属性名=属性值] 选择含有指定属性和*包含**指定值的属性值的元素 属性值都可以加上引号&quot; 123456789101112131415161718192021222324/* 选择含有title属性的p标签 */p[title] { color: green;}/* 选择含有title=\"abc\"的p标签 */p[title=abc] { color: red;}/* 选择title属性值中以abc开头的p标签 */p[title^=abc] { color: orange;}/* 选择title属性值中以abc结尾的p标签 */p[title$=abc] { color: blue;}/* 选择title属性值中包含abc的p标签 */p[title*=abc] { color: yellow;} 伪类选择器伪类选择符允许给HTML不存在的标签 （标签的某种状态）设置样式，比如鼠标滑过状态： :hover：鼠标滑过 :active：鼠标点击 :first-child：第一个子元素 :last-child：最后一个子元素 :nth-child()：第n个子元素 :nth-child(n)：所有的子元素 :nth-child(2n)或:nth-child(even)：偶数位元素 :nth-child(2n+1)或:nth-child(odd)：奇数位元素 :first-of-type：每个类型的第一个子元素 :last-of-type：每个类型的最后一个子元素 :nth-of-type()：同类型的第n个子元素，特殊值与:nth-child()相同 :not()：否定，将符合条件的元素从选择器中去除 超链接独有伪类 :link：用来表示没访问过的链接（正常的链接） :visited：用来表示访问过的链接，由于隐私的问题，visited这个伪类只能修改链接的颜色 elem1&gt;elem2:x{}：elem1中先满足x伪类的元素，再满足类型是elem2。 1234567891011121314151617181920212223242526272829303132333435363738394041a:hover{css样式代码}/* ul中的第一个子元素，并且类型是li */ul&gt;li:first-child { color: red;}/* ul中的最后一个子元素，并且类型是li */ul&gt;li:last-child { color: green;}/* ul中的第二个子元素，并且类型是li */ul&gt;li:nth-child(2) { color: yellow;}/* ul中的所有li元素 */ul&gt;li:nth-child(n) { color: blue;}/* ul中的所有偶数位的li元素 */ul&gt;li:nth-child(2n) { /*2n或even */ color: orange;}/* ul中所有奇数位的li元素 */ul&gt;li:nth-child(2n+1) { /*2n+1或odd*/ color: red;}/* ul中li类型的第一个子元素 */ul&gt;li:first-of-type { color: yellow;}/* ul中去除最后一个子元素，并且类型是li */ul&gt;li:not(:last-child) { color: red;} 能兼容所有浏览器的”伪类选择符“只有a:hover。 伪元素 伪元素：表示页面中一些特殊的并不真实存在的元素（特殊的位置） 伪元素以::开头 1234567891011121314151617181920212223242526/* 将p标签中的第一个字母设置为红色 */p::first-letter{ color: red;}/* 将p标签中的第一行设置为绿色 */p::first-line{ color: green;}/* 将p标签中选中的元素设置为橘色 */p::selection{ color: orange;}/* 在div标签中的内容最前面加上【，并设置为蓝色 */div::before{ content: '【'; color: blue;}/* 在div标签中的内容的最后面加上】，并设置为蓝色 */div::after{ content: '】'; color: blue;} 分组选择器,（逗号）：为html中多个标签元素设置同一个样式。 12/*h1, span标签同时设置颜色为红色*/h1, span{color: red;} CSS3的继承，优先级和重要性样式的继承 继承是一种规则，它允许样式不仅应用于某个特定html标签元素，而且应用于其后代； 继承的设计是为了方便我们开发，利用继承就可以将一些通用的样式统一设置到祖先元素上，这样只需要设置一次即可让所有元素都具有这样的样式； 并不是所有的样式都会被继承，比如背景相关、布局相关等的样式都不会被继承。 选择器优先级 内联式插入样式 1,0,0,0 ID选择器 0,1,0,0 类选择器 0,0,1,0 标签选择器 0,0,0,1 通配符选择器 0,0,0,0 继承的样式 没有优先级 !important 选择器最高层级； 网页样式优先级：用户自定义样式&gt;网页制作者样式&gt;浏览器默认样式； 当设置了!important，权值高于用户自定义样式。 CSS3字体样式字体类型 字体类别，浏览器会自动使用该类别下的字体 serif 衬线字体 sans-serif 非衬线字体 monospace 等宽字体 font-family 可以同时指定多个字体，多个字体间用,隔开，在前面的字体优先使用 font-face 可以将服务器中的字体直接提供给用户使用，存在部分问题 加载速度 版权 字体格式 123456789101112/*设置字体为微软雅黑*/body{ font-family: \"Microsoft Yahei\";}@font-face { /* 自定义字体名字 */ font-family: 'xxx'; /* 指定路径和类型 */ /* 如需多个使用,分开 */ src: url('xxx') format('xxx');} 如果用户本地电脑没有安装设置的字体，则将显示浏览器默认字体。 字体大小1234/*设置字体为12px*/body{ font-size: 12px;} 字体粗细1234/*设置字体为粗体*/span{ font-weight: bold;} 字体版型123456/*设置字体版型：正常、斜体、倾斜的字体*/p{ font-style: normal; /*正常*/ font-style: italic; /*斜体，用于字体本身就有倾斜的格式*/ font-style: oblique; /*倾斜的字体，强制字体倾斜*/} 字体颜色 英文命令 12345678p{ color: red;}div{ border: 2px solid transparent; /*透明颜色*/} RGB颜色 123456p{ /*整数形式*/ color: rgb(133, 45, 200); /*分数形式*/ color: rgb(20%, 33%, 25%);} RGBA： 就是在RGB的基础上增加了一个A值，表示不透明度 需要四个值，前三个和RGB一样，第四个表示不透明度，1表示完全不透明，0表示完全透明，0.5半透明 十六进制颜色（普遍使用） 语法：#红色绿色蓝色 颜色浓度：00-ff 如果颜色两两重复，可以使用缩写 #aabbcc –&gt; #abc #aabbca 不能够缩写 HSL值、HSLA值 H：色相（0-360） S：饱和度，颜色的浓度（0%-100%） L：亮度，颜色的亮度（0%-100%） A：不透明度，（0-1） font样式缩写12345678910111213/*原版*/body{ font-style:italic; font-weight:bold; font-size:12px; line-height:1.5em; font-family:\"宋体\",sans-serif;}/*缩写版*/body{ font:italic bold 12px/1.5em \"宋体\",sans-serif;} 缩写版至少指定font-size和font-family； 缩写在font-size和line-height之间需要加/； 中文网站常用缩写格式 123body{ font: 12px/1.5em \"宋体\", sans-serif;} 图标字体 通过字体来使用图标 fontawesome 使用步骤 下载 https://fontawesome.com/ 解压 将css和webfonts移动到项目中，并且要位于同一级 将all.css引入网页中 使用方式 使用类名来指定使用图标字体，class=”fas fa-xxx”或class=”fab fa-xxx”12&lt;i class=\"fab fa-qq\"&gt;&lt;/i&gt;&lt;i class=\"fas fa-bell\"&gt;&lt;/i&gt; 使用伪元素来设置图标字体 找到要设置图标的元素，通过before或after选中 在content中设置字体编码 设置字体格式 fab:font-family: ‘Font Awesome 5 Brands’; fas:font-family: ‘Font Awesome 5 Free’;font-weight: 900; 123456789101112li::before { content: '\\f42b'; font-family: 'Font Awesome 5 Brands'; /* font-weight: 400; */ /* 默认font-weight是400，所以可以忽略 */}li::after { content: '\\f44b'; font-family: 'Font Awesome 5 Free'; font-weight: 900;} 通过实体来使用图标字体:&amp;#x图标编码，同时也需要引入class=”fas”或class=”fab”;12&lt;li class=\"fab\"&gt;&amp;#xf42b;&lt;/li&gt;&lt;li class=\"fas\"&gt;&amp;#xf44b;&lt;/li&gt; CSS3文本样式文本修饰123456span{ text-decoration: none; /*默认标准文本*/ text-decoration: underline; /*文本下划线*/ text-decoration: overline; /*文本上一条线*/ text-decoration: line-through; /*穿过文本的一条线*/} 首行缩进123p{ text-indent: 2pm;} 2em的意思就是文字的2倍大小。 行高 行高指的是文字占有的实际高度 可以通过line-height来设置行高 可以直接指定一个大小（px，em） 也可以设置一个整数，这个整数就是字体大小的倍数 行高经常用来设置文字的行间距，行间距 = 行高 - 字体大小 字体框，字体框就是字体存在的格子，设置font-size实际上就是设置字体框的高度 行高会在字体框的上下平均分配 可以将行高设置为高度一样的值，可以使得单行文字在一个元素中垂直居中 123p{ line-height: 1.5em;} 字符间距 中文字、字母间距 123p{ letter-spacing: 20px;} 单词间距 123p{ word-spacing: 20px;} 水平对齐12345p{ text-align: center; /*居中*/ text-align: left; /*居左*/ text-align: right; /*居右*/} 元素垂直对齐 使用vertical-align 设置元素垂直对齐的方式 baseline 默认值，基线对齐 top 顶部对齐 bottom 底部对齐 middle 居中对齐 直接指定长度值，如verticla-align: 10px; 设置文本省略号表示多余 white-space 设置网页如何处理空白 normal 正常 nowrap 不换行 pre 保留空白 需要满足四个条件（缺一不可） 设置一个宽度 width 设置white-space: nowrap，使得文本在一行上 设置超过宽度的部分隐藏 overflow: hidden 设置文本超出的部分显示省略号 text-overflow: ellipsis 长度值 像素 指的是显示器上的小点； 同样的像素大小可能在不同的设备下显示效果不同； 百分比 将属性值设置为相对于父元素属性的百分比 可以使得子元素随着父元素的改变而改变 1p{font-size:12px;line-height:130%} 设置行高（行间距）为字体的130%（12 * 1.3 = 15.6px）。 em 相对于本元素给定字体的 font-size 值，如果元素的 font-size 为 14px ，那么 1em = 14px；如果 font-size 为 18px，那么 1em = 18px。 但当给 font-size 设置单位为 em 时，此时计算的标准以父元素的 font-size 为基础； rem rem是相对于根元素（HTML元素）字体的font-size值 CSS3盒模型盒模型、盒子模型、框模型（box model） CSS将页面中的所有元素都设置成了一个矩形的盒子 将元素设置为矩形的盒子后，对页面的布局就变成了将不同的盒子摆放到不同位置 每一个盒子都由以下几个部分组成 内容区（content） 元素中的所有的子元素和文本内容都在内容区中排列 内容区的大小由width和height两个属性来设置 width设置内容区的宽度 height设置内容区的高度 内边距（padding） 边框（border） 边框属于合盒子边缘，边框里面属于盒子内部，出了边框都是盒子的外部，边框的大小会影响到整个盒子的大小 要设置边框，需要至少设置三个样式 边框的宽度（border-width） 边框的颜色（border-color） 边框的样式（border-style） 外边距（margin） 文档流 网页是一个多层的结构，一层摞着一层 通过CSS可以分别为每一层设置样式 作为用户来讲只能看到最顶层 在这些曾中，最底下的一层称为文档流，文档流是网页的基础，我们所创建的元素默认都是在文档流中进行排列 对我们来说元素主要有两个状态 在文档流中 不在文档流中（脱离文档） 元素分类 块状元素&lt;div&gt;、&lt;p&gt;、&lt;h1&gt;…&lt;h6&gt;、&lt;ol&gt;、&lt;ul&gt;、&lt;dl&gt;、&lt;table&gt;、&lt;address&gt;、&lt;blockquote&gt; 、&lt;form&gt; 内联元素（行内元素）&lt;a&gt;、&lt;span&gt;、&lt;br&gt;、&lt;i&gt;、&lt;em&gt;、&lt;strong&gt;、&lt;label&gt;、&lt;q&gt;、&lt;var&gt;、&lt;cite&gt;、&lt;code&gt; 内联块状元素&lt;img&gt;、&lt;input&gt; 块状元素设置display:block就是将元素显示为块级元素。如下代码就是将内联元素a转换为块状元素，从而使a元素具有块状元素特点。 1a{display:block;} 块级元素特点： 每个块级元素都从新的一行开始，并且其后的元素也另起一行。（真霸道，一个块级元素独占一行） 元素的高度、宽度、行高以及顶和底边距都可设置。 元素宽度在不设置的情况下，是它本身父容器的100%（和父元素的宽度一致），除非设定一个宽度。 元素高度在不设置的情况下，是内容的高度。 内联元素设置display:inline就是将元素显示为块级元素。如下代码就是将块状元素div转换为内联元素，从而使div元素具有内联元素特点。 123div{ display: inline;} 内联元素特点： 和其他元素都在一行上； 元素的高度、宽度及顶部和底部边距不可设置； 元素的宽度就是它包含的文字或图片的宽度，不可改变。 内联块状元素设置 display: inline-block就是将元素显示为内联块状元素。 内联块状元素特点： 和其他元素都在一行上； 元素的高度、宽度、行高以及顶和底边距都可设置。 nonenone设置此元素不会被显示，当想要元素隐藏的时候可以使用此值。 123span{ display: none;} 宽度和高度一个元素实际宽度（盒子的宽度）=左边界+左边框+左填充+内容宽度+右填充+右边框+右边界。 123456div{ width: 200px; padding: 20px; border: 1px solid red; margin: 10px;} 元素的实际长度为：10px+1px+20px+200px+20px+1px+10px=262px。在chrome浏览器下可查看元素盒模型，如下图： 背景色123div{ background-color: red; /*背景色为红色*/} 边框 四个值：上 右 下 左 三个值：上 左右 下 两个值：上下 左右 一个值：上下左右 123456789div{ /*缩写版*/ border: 2px solid red; /*完整版*/ border-width: 2px; border-style: solid; border-color: red;} border-width（边框宽度）：thin| medium| thick（不常用）像素（常用） border-style（边框样式）：dashed（虚线）、dotted（点线）、solid（实线）、double（双线） border-color（边框颜色）：十六进制色、英文色 单边框123456div{ border-top: 2px solid red; /*上边框*/ border-right: 2px solid red; /*右边框*/ border-bottom: 2px solid red; /*下边框*/ border-left: 2px solid red; /*左边框*/} 阴影 box-shadow 用来设置元素的阴影效果，阴影不会影响页面布局 1box-shadow: 0px 0px 50px rgba(0, 0, 0, 0.3); 第一个值 水平偏移量，设置阴影的水平位置，正值向右移动，负值向左移动。 第二个值 垂直偏移量，设置阴影的垂直位置，正值向下移动，负值向上移动。 第三个值 阴影的模糊半径，半径越大，效果越模糊 第四个值 阴影的颜色 轮廓线 outline用来设置元素的轮廓线，用法与border一模一样 与border的不同点：轮廓线不会影响到可见框的大小，不会影响页面布局 主要用在鼠标移动上，添加轮廓的效果 圆角123456789101112131415161718div{ /*左上 右上 右下 左下*/ /*顺时针方向*/ /*缩写版*/ border-radius: 20px 10px 15px 30px; /*完整版*/ border-top-left-radius: 20px; border-top-right-radius: 10px; border-bottom-right-radius: 15px; border-bottom-left-radius: 30px; /*如果四个圆角都相等*/ border-radius: 10px; /*如果左上右下为10px 右上左下为20px*/ border-radius: 10px 20px;} 显示圆形 1234567div{ width: 200px; height: 200px; border: 5px solid red; border-radius: 100px; /*像素值为宽度和长度的一半*/ border-radius: 50%; /*百分比显示*/} 内边距123456789101112131415161718div{ /*上右下左*/ /*顺时针*/ /*缩写版*/ padding: 20px 10px 15px 30px; /*完整版*/ padding-top: 20px; padding-right: 10px; padding-bottom: 15px; padding-left: 30px; /*如果上下左右都相等*/ padding: 10px; /*上下为10px，左右为20px*/ padding: 10px 20px;} 可见框 默认情况下，盒子可见框的大小由内容区、内边距和边框共同决定。 box-sizing: 可以用来设置盒子尺寸的计算方式（设置width和height的作用） content-box 默认值，宽度和高度用来设置内容区的大小 border-box 宽度和高度用来设置整个盒子可见框的大小，也就是直到边框 外边距 外边距不会影响盒子可见框的大小，但是会影响盒子的位置 一共有四个方向的外边距 margin-top：上外边距，设置一个正值，元素向下移动 margin-right：右外边距，默认情况下不会产生任何效果 margin-bottom：下外边距，设置一个正值，其下边的元素会向下移动 margin-left：左外边距，设置一个正值，元素会向右移动 默认情况下，如果我们设置的左和上外边距则会移动元素自身，而设置下和右外边距则会移动其他元素 margin会影响到盒子实际占用空间 123456789101112131415161718div{ /*上右下左*/ /*顺时针*/ /*缩写版*/ margin: 20px 10px 15px 30px; /*完整版*/ margin-top: 20px; margin-right: 10px; margin-bottom: 15px; margin-left: 30px; /*如果上下左右都相等*/ margin: 10px; /*上下为10px，左右为20px*/ margin: 10px 20px;} CSS3布局模型水平布局 元素在其父元素中水平方向的位置由以下几个属性共同决定 margin-left border-left padding-left width padding-right border-right margin-right 水平布局必须满足以上七个元素依次相加等于父元素内容区的宽度 如果不满足，则称为过度约束，等式自动调整 都没有设置auto，则会调整margin-right 如果width和margin同时设置auto，则会将margin设置为0，直接调整width 如果只有margin-left和margin-right设置为auto，且为正值，则会平均分配，如果为负值，则只会调整margin-right auto等级：width&gt;margin 垂直布局 子元素是在父元素的内容区排列的 如果子元素的大小超过了父元素，则子元素会从父元素溢出 使用overflow、overflow-x、overflow-y属性来设置父元素如何处理溢出 visible：默认值，子元素会从父元素中溢出，在父元素外部显示 hidden：溢出的内容被裁剪 scroll：生成两个滚动条 auto：根据需要生成滚动条 垂直外边距的折叠 相邻的垂直方向外边距会发生重叠现象 兄弟元素 当之间的相邻垂直外边距同号 之间的相邻垂直外边距会取两者之间的绝对值的较大值 当之间的相邻垂直外边距异号 之间的相邻垂直外边距会去两者之间的和 父子元素 父子元素之间相邻垂直外边距，子元素会传递给父元素 父子外边距的折叠会影响页面的布局，必须进行处理 行内元素的盒模型 行内元素不支持设置宽度和高度 行内元素设置的padding、border、margin都不会影响垂直方向的布局 display用来设置元素显示的类型 inline 将元素设置为行内元素 block 将元素设置为块元素 inline-block 将元素设置为行内块元素，既可以设置宽度和高度，又可以不独占一行 table 将元素设置成一个表格 none 元素不在页面中显示 visibility 用来设置元素的显示状态 visible 默认值，元素在页面中正常显示 hidden 元素在页面中隐藏，但是依然占据页面位置 css布局模型 流动模型（Flow） 浮动模型（Float） 层模型（Layer） 流动模型默认的网页布局模式。 特征： 块状元素都会在所处的包含元素内自上而下按顺序垂直延伸分布，在默认状态下，块状元素的宽度都为100%； 在流动模型下，内联元素都会在所处的包含元素内从左到右水平分布显示。 浮动模型 通过浮动可以使一个元素向其父元素的左侧或右侧移动 使用float属性来设置元素的浮动 none 默认值，元素不浮动 left 元素向左浮动 right 元素向右浮动 元素设置浮动以后，水平布局的等式便不需要强制成立 元素设置浮动以后，会完全从文档流中脱离，不再占用文档流的位置，所以元素下边的还在文档流中的元素可以向上移动 浮动的特点 浮动元素会完全脱离文档流，不再占据文档流中的位置 设置浮动以后元素会向父元素的左侧或右侧移动 浮动元素默认不会从父元素中移出 浮动元素向左或向右移动时，不会超过它前边的其他浮动元素 如果浮动元素的上边是一个没有浮动的块元素，则浮动元素无法上移 浮动元素不会超过它上边的浮动的兄弟元素，最多和它在同一行 浮动元素的特点 浮动元素不会盖住文字，文字会自动环绕在浮动元素的周围，所以我们可以利用浮动来设置文字环绕图片的效果 脱离文档流后，宽度和高度都默认被内容撑开，并且不会独占一行 1234div{ float: left; float: right;} 高度塌陷问题和BFC 高度塌陷问题：在浮动布局中，父元素的高度默认是被子元素撑开的，当子元素浮动以后，其会完全脱离文档流，子元素从文档流中脱离，将会无法撑起父元素的高度，导致父元素的高度丢失。父元素高度丢失以后，其下的元素会自动上移，导致页面混乱。 BFC（Block Formatting Context）：块级格式化环境 BFC是一个CSS中一个隐含的属性，一个元素开启BFC就会变成一个独立的布局区域。 开启BFC后的特点 开启BFC的元素不会被浮动元素所覆盖。 开启BFC的元素子元素和父元素外边距不会重叠。 开启BFC的元素可以包含浮动的子元素。 可以通过一些特殊的方式来开启元素的BFC 设置元素的浮动（不推荐） 将元素设置为行内块元素（不推荐） 将元素的overflow设置一个非visible的值，常用的方式是为元素设置overflow: hidden，开启其BFC。 clear 清除浮动元素对当前元素所产生的影响 left 清除左侧浮动元素对当前元素的影响 right 清除右侧浮动元素对当前元素的影响 both 清除两侧浮动元素对当前元素的影响（取两侧影响最大的那侧清除） 原理 设置清除浮动之后，浏览器会自动为元素添加一个上外边距以使得其位置不受到其他浮动元素的影响 使用::after和clear解决高度塌陷问题1234567891011121314151617181920div.outer { border: 10px red solid;}div.outer&gt;div.inner { width: 200px; height: 200px; background-color: #bfa; float: left; /* 子元素设置浮动，而父元素并未开启BFC，则会产生高度塌陷问题 */}div.outer::after { content: \"\"; display: block; clear: both; /* 在父元素中，通过::after伪元素添加一个空文本 而由于::after默认是行内元素，就算清除了前面浮动元素对页面布局的影响，不会出现在div.inner的下面，也只会出现在旁边，所以给其设置为block 然后再清除它前面浮动元素对页面布局的影响，则浏览器会给它设置一个与div.inner高度相同的上外边距，这样就可以将父元素的高度撑开了，并且高度和子元素所需要的高度相同 */} 使用::before解决父子元素垂直外边距重叠问题12345678910111213141516171819div.outer { width: 200px; height: 200px; background-color: #bfa;}div.outer&gt;div.inner{ width: 100px; height: 100px; background-color: orange; margin-top: 100px; /* 因为子元素的上外边距和父元素重叠，则设置子元素的上外边距会传递给父元素，这时候会整体移动，出现布局问题 */}div.outer::before{ content: \"\"; display: table; /* 在父子元素之间使用::before伪元素，将其隔开，则能够有效解决外边距重叠问题 */} 使用.clearfix同时解决高度塌陷和父子元素垂直外边距重叠问题123456.clearfix::before,.clearfix::after { content: \"\"; display: table; clear: both;} 定位 定位是一种更加高级的布局手段 通过定位可以将元素摆放到页面的任意位置 通过position属性来设置定位 static 默认值，元素是静止的没有开启定位 relative 开启元素的相对定位 absolute 开启元素的绝对定位 fixed 开启元素的固定定位 sticky 开启元素的粘滞定位 相对定位 当元素的position属性值设置为relative时，则开启了元素的相对定位 相对定位的特点 元素开启相对定位以后，如果不设置偏移量，元素不会发生任何变化 相对定位是参照元素在文档流中的位置进行定位的 相对定位会提升元素的层级 相对定位不会使元素脱离文档流 相对定位不会改变元素的性质 偏移量（offset） 当元素开启了定位以后，可以通过偏移量来设置元素的位置 top 定位元素和定位位置上边的距离 bottom 定位元素和定位位置下边的距离 left 定位元素和定位位置左边的距离 right 定位元素和定位位置的右侧距离 通常情况下，top和bottom只会使用一个来控制垂直位置，left和right只会使用一个来控制水平位置。 如果想为元素设置层模型中的相对定位，需要设置position:relative（表示相对定位），它通过left、right、top、bottom属性确定元素在正常文档流中的偏移位置。相对定位完成的过程是首先按static(float)方式生成一个元素(并且元素像层一样浮动了起来)，然后相对于以前的位置移动，移动的方向和幅度由left、right、top、bottom属性确定，偏移前的位置保留不动。 12345div{ position: relative; /*相对定位*/ left: 100px; /*距离以前位置左侧100px*/ top: 50px; /*距离以前位置顶部50px*/} 绝对定位 当元素的position属性值设置为absolute时，则开启了元素的绝对定位 绝对定位的特点 开启绝对定位后，如果不设置偏移量元素的位置不会发生变化 开启绝对定位后，元素会从文档流中脱离 绝对定位会改变元素的性质，行内元素变成块元素，块元素的宽高被内容撑开 绝对定位会使元素提升一个层级 绝对定位元素是相对于其包含块进行定位的 包含块（containing block） 正常情况下，包含块就是离当前元素最近的祖先块元素 绝对定位下，包含块就是离当前元素最近的开启了定位的祖先块元素，如果所有祖先块元素都没有开启定位，则根元素就是它的包含块 html元素叫做根元素或者是初始包含块 如果想为元素设置层模型中的绝对定位，需要设置position:absolute(表示绝对定位)，这条语句的作用将元素从文档流中拖出来，然后使用left、right、top、bottom属性相对于其最接近的一个具有定位属性的父包含块进行绝对定位。如果不存在这样的包含块，则相对于body元素，即相对于浏览器窗口。 12345div{ position: absolute; /*绝对定位*/ left: 100px; /*距离左侧100px*/ top: 50px; /*距离顶部50px*/} 固定定位 当元素的position属性值设置为fixed时，则开启了元素的固定定位 大部分特点和绝对定位是一样的，只是固定定位永远参考于浏览器的视口进行定位 fixed：表示固定定位，与absolute定位类型类似，但它的相对移动的坐标是视图（屏幕内的网页窗口）本身。由于视图本身是固定的，它不会随浏览器窗口的滚动条滚动而变化，除非你在屏幕中移动浏览器窗口的屏幕位置，或改变浏览器窗口的显示大小，因此固定定位的元素会始终位于浏览器窗口内视图的某个位置，不会受文档流动影响。 12345div{ position: fixed; /*固定定位*/ right: 0px; /*距离网页窗口右侧0px*/ bottom: 0px; /*距离网页窗口底部0px*/} 粘滞定位 当元素的position属性设置为sticky时则开启了元素的粘滞定位 粘滞定位的特点和相对定位基本一样，不同的是粘滞定位可以在元素到达某个位置时将其固定 绝对定位与相对定位结合使用 参照定位的元素必须是相对定位元素的前辈元素： 12345&lt;div id=\"box1\"&gt;/*参照定位的元素*/ &lt;div id=\"box2\"&gt;相对参照元素进行定位&lt;/div&gt; /*相对定位元素*/&lt;/div&gt; 从上面代码可以看出box1是box2的父元素（父元素当然也是前辈元素了）。 参照定位的元素必须加入position:relative; 12345#box1{ width:200px; height:200px; position:relative; } 定位元素加入position:absolute，便可以使用top、bottom、left、right来进行偏移定位了。 12345#box2{ position:absolute; top:20px; left:30px; } 这样box2就可以相对于父元素box1定位了（这里注意参照物就可以不是浏览器了，而可以自由设置了）。 绝对定位元素的布局 当开启绝对定位后，水平方向的布局等式就需要添加left和right两个值，垂直方向就需要添加top和bottom left、right、top和bottom的默认值都是auto 如果发生过度约束 auto等级：width&gt;right&gt;left&gt;margin或height&gt;bottom&gt;top&gt;margin 检查有无auto 如果有，就按照auto等级调整 否则就调整right或bottom 元素的层级 对于开启了定位的元素，可以通过z-index属性来指定元素的层级 z-index需要一个整数作为参数，值越大元素层级越高，层级高的优先显示 如果元素层级一样，则优先显示靠下的元素 祖先元素的层级再高也不会盖住后代元素 背景 background-color: 设置背景颜色 background-image: 设置背景图片 通过设置url(“xxx”)，来选择背景图片 如果同时设定background-color和background-image，背景颜色会成为背景图片的背景色 如果背景图片尺寸小于元素，背景图片会将元素铺满 如果背景图片尺寸大于元素，背景图片多余部分会被裁剪 如果背景图片尺寸等于元素，背景图片正常显示 background-repeat: 设置背景图片重复方式 repeat 默认值，背景沿着x轴、y轴双方向重复 repeat-x 沿着x轴方向重复 repeat-y 沿着y轴方向重复 no-repeat 背景图片不重复 background-position: 设置背景图片位置 top、left、right、bottom、center：必须设置两个值，否则第二个值默认为center 偏移量（水平方向偏移量 垂直方向偏移量） background-size: 设置背景图片大小 两个值：宽度、高度，只写一个值的话，第二个值默认auto cover 图片比例不变，将元素铺满 contain 图片比例不变，将背景图片完整显示 background-origin: 设置背景图片的原点 padding-box 默认值，background-position从内边距处开始计算 content-box background-position从内容区开始计算 border-box background-position从边框区开始计算 background-clip: 设置背景范围 border-box 默认值，背景会出现在边框下 padding-box 背景出现在内边距和内容区下 content-box 背景出现在内容区 background-attachment: 背景图片是否跟着元素移动 scroll 默认值，背景图片会随着元素移动 fixed 背景固定在页面中，不会随元素移动 简写属性：background background-position/background-size: background-position必须写在background-size前面，并且用/隔开 background-origin background-clip: background-origin必须在background-clip前面flex弹性盒模型 flex属性123456789101112131415161718192021222324252627.box { background: blue; display: flex;}.box div { width: 200px; height: 200px;}.box1 { background: red;}.box2 { background: orange;}.box3 { background: green;}&lt;div class=\"box\"&gt; &lt;div class=\"box1\"&gt;&lt;/div&gt; &lt;div class=\"box2\"&gt;&lt;/div&gt; &lt;div class=\"box3\"&gt;&lt;/div&gt;&lt;/div&gt; 三个块元素设置大小以及背景色，在父容器中添加flex。 技术点的解释： 设置display: flex属性可以把块级元素在一排显示。 flex需要添加在父元素上，改变子元素的排列顺序。 默认为从左往右依次排列,且和父元素左边没有间隙。 横轴排列方式1justify-content: flex-start| flex-end| center| space-between| space-around; flex-start：交叉轴的起点对齐； flex-end：右对齐； center： 居中； space-between：两端对齐，项目之间的间隔都相等； space-around：每个项目两侧的间隔相等。所以，项目之间的间隔比项目与边框的间隔大一倍。 纵轴排列方式1align-items: flex-start| flex-end| center| baseline| stretch; flex-start：默认值，左对齐； flex-end：交叉轴的终点对齐； center： 交叉轴的中点对齐； baseline：项目的第一行文字的基线对齐； stretch（默认值）：如果项目未设置高度或设为auto，将占满整个容器的高度。 flex占比 给子元素设置flex属性,可以设置子元素相对于父元素的占比。 flex属性的值只能是正整数,表示占比多少。 给子元素设置了flex之后,其宽度属性会失效。 水平居中显示行内元素123.center{ text-align: center;} 块状元素——定宽块状元素1234div{ width: 200px; /*定宽，不可缺*/ margin: 20px auto; /*上下为20px，左右auto*/} 已知宽高实现盒子水平垂直居中123456789101112131415.box { border: 1px solid #00ee00; height: 300px; position: relative;}.box1 { width: 200px; height: 200px; border: 1px solid red; position: absolute; top: 50%; left: 50%; margin:-100px 0 0 -100px;} 利用父元素设置相对定位,子元素设置绝对定位,那么子元素就是相对于父元素定位的特性。 子元素设置上和左偏移的值都为50%，是元素的左上角在父元素中心点的位置。效果： 然后再用margin给上和左都给负的自身宽高的一半,就能达到垂直水平居中的效果。 不知宽高实现盒子水平垂直居中12345678910111213.box { border: 1px solid #00ee00; height: 300px; position: relative;}.box1 { border: 1px solid red; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%);} 利用父元素设置相对定位,子元素设置绝对定位,那么子元素就是相对于父元素定位的特性。 子元素设置上和左偏移的值都为50%。 然后再用css3属性translate位移,给上和左都位移-50%距离，就能达到垂直水平居中的效果。","link":"/2020/06/14/%E5%89%8D%E7%AB%AF%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}],"tags":[{"name":"HTML","slug":"HTML","link":"/tags/HTML/"},{"name":"CSS","slug":"CSS","link":"/tags/CSS/"},{"name":"Javascript","slug":"Javascript","link":"/tags/Javascript/"},{"name":"MVC","slug":"MVC","link":"/tags/MVC/"},{"name":"Flask","slug":"Flask","link":"/tags/Flask/"},{"name":"Python","slug":"Python","link":"/tags/Python/"},{"name":"前端","slug":"前端","link":"/tags/%E5%89%8D%E7%AB%AF/"}],"categories":[{"name":"MVC","slug":"MVC","link":"/categories/MVC/"},{"name":"前端","slug":"前端","link":"/categories/%E5%89%8D%E7%AB%AF/"},{"name":"学习笔记","slug":"学习笔记","link":"/categories/%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"}]}